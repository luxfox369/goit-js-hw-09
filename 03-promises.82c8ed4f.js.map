{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDG,EAAK,sBAAuCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAErDA,E,IAGP,IAAIS,EAAc,GACZC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,SAC9BE,OAAOH,SAASC,cAAc,WAC9BG,QAASJ,SAASC,cAAc,YAChCI,IAAKL,SAASC,cAAc,QAC5BK,KAAMN,SAASC,cAAc,SAC7BM,IAAKP,SAASC,cAAc,QAC5BO,OAAQR,SAASC,cAAc,gBAmDjC,SAASQ,IACYpB,QAAQgB,IAAIR,GAC5Ba,MAAK,SAAAC,G,OAASC,EAAA5B,GAAS6B,OAAOC,QAAQH,E,IACtCI,OAAM,SAAAC,G,OAASJ,EAAA5B,GAAS6B,OAAOI,QAAQD,E,IAI1C,SAASE,IACa7B,QAAQiB,KAAKT,GAC9Ba,MAAK,SAAAC,G,OAASC,EAAA5B,GAAS6B,OAAOC,QAAQH,E,IACtCI,OAAM,SAAAC,G,OAASJ,EAAA5B,GAAS6B,OAAOI,QAAQD,E,IAE9C,SAASG,IACY9B,QAAQkB,IAAIV,GAC5Ba,MAAK,SAAAC,G,OAASC,EAAA5B,GAAS6B,OAAOC,QAAQH,E,IAC/BI,OAAD,SAAAC,G,OAASJ,EAAA5B,GAAS6B,OAAOI,QAAQD,E,IAE5C,SAASI,IACmB/B,QAAQgC,WAAWxB,GAC1Ca,MAAK,SAAAC,G,OAASC,EAAA5B,GAAS6B,OAAOC,QAAQH,E,IACtCI,OAAM,SAAAC,G,OAASJ,EAAA5B,GAAS6B,OAAOI,QAAQD,E,IApE5ClB,EAAKO,IAAIiB,UAAW,EACpBxB,EAAKQ,KAAKgB,UAAW,EACrBxB,EAAKS,IAAIe,UAAW,EACpBxB,EAAKU,OAAOc,UAAW,EAGvBxB,EAAKC,KAAKwB,MAAMC,QAAU,2DAC1B1B,EAAKK,OAAOoB,MAAMC,QAAU,uCAC5B1B,EAAKM,QAAQmB,MAAMC,QAAU,gEAE7B1B,EAAKC,KAAK0B,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAEC,iBAEc,IAA6CC,EAAfF,EAAEG,cAAxCC,SAAY1C,EAAKwC,EAALxC,MAAO2C,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAE7BC,EAASC,OAAO9C,EAAMuB,OACtBwB,EAAQD,OAAOH,EAAKpB,OACpByB,EAAUF,OAAOF,EAAOrB,OAG5B,IAAK0B,EAAI,EAAGA,GAAKD,EAASC,GAAK,EAAG,CAChCzB,EAAA5B,GAASsD,QAAQC,SAAS,wBACtBF,EAAI,IACNJ,GAAUE,GAEZ,IAAIK,EAAUtD,EAAcmD,EAAGJ,GAC/BO,EACG9B,MAAK,SAAA+B,GAAU7B,EAAA5B,GAAS6B,OAAOC,QAAQ2B,E,IACvC1B,OAAM,SAAAC,GAAWJ,EAAA5B,GAAS6B,OAAOI,QAAQD,E,IAE5CnB,EAAY6C,KAAKF,E,CAEnB5B,EAAA5B,GAASsD,QAAQK,OAAO,KACxB7C,EAAKO,IAAIoB,iBAAiB,QAAShB,GACnCX,EAAKQ,KAAKmB,iBAAiB,QAASP,GACpCpB,EAAKS,IAAIkB,iBAAiB,QAASN,GACnCrB,EAAKU,OAAOiB,iBAAiB,QAASL,E,IAKjBtB,EAAhBO,IAAIiB,UAAW,EACpBxB,EAAKQ,KAAKgB,UAAW,EACrBxB,EAAKS,IAAIe,UAAW,EACpBxB,EAAKU,OAAOc,UAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\nlet arrPromises = [];\nconst refs = {\n  form: document.querySelector(\".form\"),\n  input: document.querySelector(\"input\"),\n  submit:document.querySelector(\".submit\"),\n  buttons: document.querySelector(\".buttons\"),\n  all: document.querySelector(\".all\"),\n  race: document.querySelector(\".race\"),\n  any: document.querySelector(\".any\"),\n  allSet: document.querySelector(\".allSettled\"),\n  \n}\nrefs.all.disabled = true;\nrefs.race.disabled = true;\nrefs.any.disabled = true;\nrefs.allSet.disabled = true;\n\n//refs.input.style.cssText = 'display:inline-block;width:50px';\nrefs.form.style.cssText = 'display:flex;flex-direction:column;gap:20px;padding:10px';\nrefs.submit.style.cssText = 'width:150px;height:50px;padding:10px';\nrefs.buttons.style.cssText = 'display:flex;gap:10px;height:50px;font-size:50px;padding:10px';\n\nrefs.form.addEventListener(\"submit\", onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  //ловимо всі input форми  по name \n  const { elements: { delay, step, amount } } = e.currentTarget;\n  //вони символьні тому перетворюємо на числа\n  let nDelay = Number(delay.value);\n  let nStep = Number(step.value);\n  let nAmount = Number(amount.value);\n  //console.log(nDelay,\"/\", nStep,\"/\", nAmount);\n  \n  for (i = 1; i <= nAmount; i += 1) {\n    Notiflix.Loading.standard('Creating promises...');\n    if (i > 1) {\n      nDelay += nStep;\n    }\n    let promise = createPromise(i, nDelay);\n    promise\n      .then(data => { Notiflix.Notify.success(data) })\n      .catch(error => { Notiflix.Notify.failure(error) });\n\n    arrPromises.push(promise);\n  }\n  Notiflix.Loading.remove(3000);\n  refs.all.addEventListener(\"click\", allPromise);\n  refs.race.addEventListener(\"click\", racePromise);\n  refs.any.addEventListener(\"click\", anyPromise);\n  refs.allSet.addEventListener(\"click\", allSet);\n  \n//e.currentTarget.reset();\n}\n  //кнопки функцій доступні\n  refs.all.disabled = false;\n  refs.race.disabled = false;\n  refs.any.disabled = false;\n  refs.allSet.disabled = false;\n\nfunction allPromise (){\n  const promiseAll = Promise.all(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) // when all of the promises fulfill;  \n    .catch(error => Notiflix.Notify.failure(error));// rejects when any of the promises rejects and return the first rejected\n}\n//Notiflix.Notify.success(value)\n  //Notiflix.Notify.failure(error)\n  function racePromise() {\n    const promiseRace = Promise.race(arrPromises)\n      .then(value => Notiflix.Notify.success(value)) //RACE Settles = fulfills when first of the promises fulfills \n      .catch(error => Notiflix.Notify.failure(error));//rejects when any of the promises rejects.\n}\nfunction anyPromise() {\n  const promiseAny = Promise.any(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) //ANY поверне Fulfills when any of the promises fulfills; \n    .catch(error => Notiflix.Notify.failure(error));// rejects when all of the promises reject. and returns aggregateEror якщо всі rejected  \n}\nfunction allSet() {\n  const promiseAllSettled = Promise.allSettled(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) //AllSettled поверне  масив всіх промісів як resolve/reject коли всі проміси завершені(settled)\n    .catch(error => Notiflix.Notify.failure(error));\n}\n\n//refs.all.removeEventListener(\"click\", allPromise);\n//refs.race.removeEventListener(\"click\", racePromise);\n//refs.any.removeEventListener(\"click\", anyPromise);\n//refs.allSet.removeEventListener(\"click\", allSet);\n\n\n\n "],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","$ce04d3a99e08e73b$var$arrPromises","$ce04d3a99e08e73b$var$refs","form","document","querySelector","input","submit","buttons","all","race","any","allSet","$ce04d3a99e08e73b$var$allPromise","then","value","$parcel$interopDefault","Notify","success","catch","error","failure","$ce04d3a99e08e73b$var$racePromise","$ce04d3a99e08e73b$var$anyPromise","$ce04d3a99e08e73b$var$allSet","allSettled","disabled","style","cssText","addEventListener","e","preventDefault","_elements","currentTarget","elements","step","amount","nDelay","Number","nStep","nAmount","i","Loading","standard","promise","data","push","remove"],"version":3,"file":"03-promises.82c8ed4f.js.map"}