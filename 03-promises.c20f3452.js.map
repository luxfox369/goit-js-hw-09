{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAc,GAChBC,EAAS,2BACA,SAAJC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAS,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAErDG,EAAK,sBAAuCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAErDA,E,IAIP,IAAMS,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,SAC9BE,OAAQH,SAASC,cAAc,WAC/BG,QAASJ,SAASC,cAAc,YAChCI,IAAKL,SAASC,cAAc,QAC5BK,KAAMN,SAASC,cAAc,SAC7BM,IAAKP,SAASC,cAAc,QAC5BO,OAAQR,SAASC,cAAc,eAC/BQ,SAAUT,SAASC,cAAc,cAyEV,SAAhBS,IACYpB,QAAQe,IAAIpB,GAC5B0B,MAAK,SAAAC,G,OAASC,EAAA9B,GAAS+B,OAAOC,QAAQH,E,IACtCI,OAAM,SAAAC,G,OAASJ,EAAA9B,GAAS+B,OAAOI,QAAQD,E,IAE5C,SAASE,IACe7B,QAAQgB,KAAKrB,GAC9B0B,MAAK,SAAAC,G,OAASC,EAAA9B,GAAS+B,OAAOC,QAAQH,E,IACtCI,OAAM,SAAAC,G,OAASJ,EAAA9B,GAAS+B,OAAOI,QAAQD,E,IAE9C,SAASG,IACY9B,QAAQiB,IAAItB,GAC5B0B,MAAK,SAAAC,G,OAASC,EAAA9B,GAAS+B,OAAOC,QAAQH,E,IAC/BI,OAAD,SAAAC,G,OAASJ,EAAA9B,GAAS+B,OAAOI,QAAQD,E,IAE5C,SAASI,IACmB/B,QAAQgC,WAAWrC,GAC1C0B,MAAK,SAAAC,G,OAASC,EAAA9B,GAAS+B,OAAOC,QAAQH,E,IACtCI,OAAM,SAAAC,G,OAASJ,EAAA9B,GAAS+B,OAAOI,QAAQD,E,IAjC1CnB,EAAKO,IAAIkB,UAAW,EACpBzB,EAAKQ,KAAKiB,UAAW,EACrBzB,EAAKS,IAAIgB,UAAW,EACpBzB,EAAKU,OAAOe,UAAW,EAxDpBzB,EAAAC,KAAKyB,MAAMC,QAAU,6EAC1B3B,EAAKK,OAAOqB,MAAMC,QAAU,sCAC5B3B,EAAKM,QAAQoB,MAAMC,QAAU,sFAEV3B,EAAdC,KAAK2B,iBAAiB,UAG3B,SAAkBC,GAChBA,EAAEC,iBAEc,IAA6CC,EAAfF,EAAEG,cAAxCC,SAAY1C,EAAKwC,EAALxC,MAAO2C,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAE7BC,EAASC,OAAO9C,EAAMuB,OACpBwB,EAAQD,OAAOH,EAAKpB,OACpByB,EAAUF,OAAOF,EAAOrB,OAE9B,IAAK0B,EAAI,EAAGA,GAAKD,EAASC,GAAK,EAAG,CAChCzB,EAAA9B,GAASwD,QAAQC,SAAS,wBACtBF,EAAI,IACNJ,GAAUE,GAEZ,IAAIK,EAAUtD,EAAcmD,EAAGJ,GAE/BO,EACG9B,MAAK,SAAA+B,GAAS7B,EAAA9B,GAAS+B,OAAOC,QAAQ2B,GAAMxD,GAAY,OAAYW,OAAL6C,EAAK,O,IACpE1B,OAAM,SAAAC,GAAUJ,EAAA9B,GAAS+B,OAAOI,QAAQD,GAAO/B,GAAU,OAAaW,OAANoB,EAAM,O,IAGxBhC,EAArC0D,KAAKF,E,CAInB7C,YAAW,WACTgD,QAAQC,IAAI3D,GACZY,EAAKW,SAASqC,UAAY5D,EAC1B2B,EAAA9B,GAASwD,QAAQQ,OAAO,KA2B1BjD,EAAKO,IAAIkB,UAAW,EACpBzB,EAAKQ,KAAKiB,UAAW,EACrBzB,EAAKS,IAAIgB,UAAW,EACpBzB,EAAKU,OAAOe,UAAW,C,GA3BpBW,EAAOE,EAAMC,GAGhBV,EAAEG,cAAckB,O,IAIMlD,EAAjBO,IAAIqB,iBAAiB,QAAShB,GACnCZ,EAAKQ,KAAKoB,iBAAiB,QAASP,GACpCrB,EAAKS,IAAImB,iBAAiB,QAASN,GACnCtB,EAAKU,OAAOkB,iBAAiB,QAASL,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\nconst arrPromises = [];\nlet markUp = '<h3>Масив промісів:</h3>';\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.5;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve( `✅ Fulfilled promise ${position} in ${delay}ms` );\n             } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nconst refs = {\n  form: document.querySelector(\".form\"),\n  input: document.querySelector(\"input\"),\n  submit: document.querySelector(\".submit\"),\n  buttons: document.querySelector(\".buttons\"),\n  all: document.querySelector(\".all\"),\n  race: document.querySelector(\".race\"),\n  any: document.querySelector(\".any\"),\n  allSet: document.querySelector(\".allSettled\"),\n  promises: document.querySelector(\".promises\")\n}\n // кнопки функцій недоступні\ndisabledButtons();\n//стилі\nrefs.form.style.cssText = 'display:flex;flex-direction:column;align-items:center;gap:10px;padding:5px';\nrefs.submit.style.cssText = 'width:150px;height:50px;padding:5px';\nrefs.buttons.style.cssText = 'display:flex;gap:10px;justify-content:center;height:50px;font-size:30px;padding:5px';\n//прослуховувач кнопки\nrefs.form.addEventListener(\"submit\", onSubmit);\n//створення промісів\n;\nfunction onSubmit(e) {\n  e.preventDefault();\n  //ловимо всі input форми  по name \n  const { elements: { delay, step, amount } } = e.currentTarget;\n  //вони символьні тому перетворюємо на числа\n  let nDelay = Number(delay.value);\n  const nStep = Number(step.value);\n  const nAmount = Number(amount.value);\n  \n  for (i = 1; i <= nAmount; i += 1) {\n    Notiflix.Loading.standard('Creating promises...');\n    if (i > 1) {\n      nDelay += nStep;\n    }\n    let promise = createPromise(i, nDelay);\n   \n    promise\n      .then(data => {Notiflix.Notify.success(data);markUp   += `<p> ${data}</p>` }) // \n      .catch(error => {Notiflix.Notify.failure(error);markUp += `<p> ${error}</p>` }) //\n      \n    //формуємо масив отриманих промісів для подальших функцій\n    arrPromises.push(promise);\n    //намалюємо отримані проміси на сторінці через markUp\n  \n  }\n  setTimeout(() => {\n    console.log(markUp);\n    refs.promises.innerHTML = markUp;\n    Notiflix.Loading.remove(3000); //забираємо колесо через 3с\n    enabledButtons();\n   \n  }, nDelay+nStep*nAmount);\n  \n   \n  e.currentTarget.reset();\n}\n \n  //вішаємо функції на кнопки\n  refs.all.addEventListener(\"click\", allPromise);\n  refs.race.addEventListener(\"click\", racePromise);\n  refs.any.addEventListener(\"click\", anyPromise);\n  refs.allSet.addEventListener(\"click\", allSet);\n  \n  \n //кнопки функцій недоступні\n function disabledButtons() {\n  refs.all.disabled = true;\n  refs.race.disabled = true;\n  refs.any.disabled = true;\n  refs.allSet.disabled = true;\n}\n\n\n// кнопки функцій доступні\nfunction enabledButtons() {\n  refs.all.disabled = false;\n  refs.race.disabled = false;\n  refs.any.disabled = false;\n  refs.allSet.disabled = false;\n}\n//функції над масивом промісів\nfunction allPromise (){\n  const promiseAll = Promise.all(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) // when all of the promises fulfill;  \n    .catch(error => Notiflix.Notify.failure(error));// rejects when any of the promises rejects and return the first rejected\n}\nfunction racePromise() {\n    const promiseRace = Promise.race(arrPromises)\n      .then(value => Notiflix.Notify.success(value)) //RACE Settles = fulfills when first of the promises fulfills \n      .catch(error => Notiflix.Notify.failure(error));//rejects when first of the promises rejects.\n}\nfunction anyPromise() {\n  const promiseAny = Promise.any(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) //ANY поверне Fulfills when any of the promises fulfills; \n    .catch(error => Notiflix.Notify.failure(error));// rejects when all of the promises reject. and returns aggregateEror якщо всі rejected  \n}\nfunction allSet() {\n  const promiseAllSettled = Promise.allSettled(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) //AllSettled поверне  масив всіх промісів як resolve/reject коли всі проміси завершені(settled)\n    .catch(error => Notiflix.Notify.failure(error));\n}\n\n\nfunction clearListener() {\n  refs.all.removeEventListener(\"click\", allPromise);\n  refs.race.removeEventListener(\"click\", racePromise);\n  refs.any.removeEventListener(\"click\", anyPromise);\n  refs.allSet.removeEventListener(\"click\", allSet);\n}\n\n\n "],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$arrPromises","$ce04d3a99e08e73b$var$markUp","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","$ce04d3a99e08e73b$var$refs","form","document","querySelector","input","submit","buttons","all","race","any","allSet","promises","$ce04d3a99e08e73b$var$allPromise","then","value","$parcel$interopDefault","Notify","success","catch","error","failure","$ce04d3a99e08e73b$var$racePromise","$ce04d3a99e08e73b$var$anyPromise","$ce04d3a99e08e73b$var$allSet","allSettled","disabled","style","cssText","addEventListener","e","preventDefault","_elements","currentTarget","elements","step","amount","nDelay","Number","nStep","nAmount","i","Loading","standard","promise","data","push","console","log","innerHTML","remove","reset"],"version":3,"file":"03-promises.c20f3452.js.map"}