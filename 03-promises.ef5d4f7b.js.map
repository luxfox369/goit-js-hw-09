{"mappings":"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","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\nconst arrPromises = [];\nlet markUp = '<h3>Масив промісів:</h3>';\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.5;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve( `✅ Fulfilled promise ${position} in ${delay}ms` );\n             } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nconst refs = {\n  form: document.querySelector(\".form\"),\n  input: document.querySelector(\"input\"),\n  submit: document.querySelector(\".submit\"),\n  buttons: document.querySelector(\".buttons\"),\n  all: document.querySelector(\".all\"),\n  race: document.querySelector(\".race\"),\n  any: document.querySelector(\".any\"),\n  allSet: document.querySelector(\".allSettled\"),\n  promises: document.querySelector(\".promises\")\n}\n // кнопки функцій недоступні\ndisabledButtons();\n//стилі\nrefs.form.style.cssText = 'display:flex;flex-direction:column;align-items:center;gap:10px;padding:5px';\nrefs.submit.style.cssText = 'width:150px;height:50px;padding:5px';\nrefs.buttons.style.cssText = 'display:flex;gap:10px;justify-content:center;height:50px;font-size:30px;padding:5px';\n//прослуховувач кнопки\nrefs.form.addEventListener(\"submit\", onSubmit);\n//створення промісів\n;\nfunction onSubmit(e) {\n  e.preventDefault();\n  //ловимо всі input форми  по name \n  const { elements: { delay, step, amount } } = e.currentTarget;\n  //вони символьні тому перетворюємо на числа\n  let nDelay = Number(delay.value);\n  const nStep = Number(step.value);\n  const nAmount = Number(amount.value);\n  \n  for (i = 1; i <= nAmount; i += 1) {\n    Notiflix.Loading.standard('Creating promises...');\n    if (i > 1) {\n      nDelay += nStep;\n    }\n    let promise = createPromise(i, nDelay);\n   \n    promise\n      .then(data => {Notiflix.Notify.success(data);markUp   += `<p> ${data}</p>` }) // \n      .catch(error => {Notiflix.Notify.failure(error);markUp += `<p> ${error}</p>` }) //\n      \n    //формуємо масив отриманих промісів для подальших функцій\n    arrPromises.push(promise);\n    //намалюємо отримані проміси на сторінці через markUp\n  \n  }\n  setTimeout(() => {\n    console.log(markUp);\n    refs.promises.innerHTML = markUp;\n    Notiflix.Loading.remove(3000); //забираємо колесо через 3с\n    enabledButtons();\n   \n  }, nDelay+nStep*nAmount);\n  \n   \n  e.currentTarget.reset();\n}\n \n  //вішаємо функції на кнопки\n  refs.all.addEventListener(\"click\", allPromise);\n  refs.race.addEventListener(\"click\", racePromise);\n  refs.any.addEventListener(\"click\", anyPromise);\n  refs.allSet.addEventListener(\"click\", allSet);\n  \n  \n //кнопки функцій недоступні\n function disabledButtons() {\n  refs.all.disabled = true;\n  refs.race.disabled = true;\n  refs.any.disabled = true;\n  refs.allSet.disabled = true;\n}\n\n\n// кнопки функцій доступні\nfunction enabledButtons() {\n  refs.all.disabled = false;\n  refs.race.disabled = false;\n  refs.any.disabled = false;\n  refs.allSet.disabled = false;\n}\n//функції над масивом промісів\nfunction allPromise (){\n  const promiseAll = Promise.all(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) // when all of the promises fulfill;  \n    .catch(error => Notiflix.Notify.failure(error));// rejects when any of the promises rejects and return the first rejected\n}\nfunction racePromise() {\n    const promiseRace = Promise.race(arrPromises)\n      .then(value => Notiflix.Notify.success(value)) //RACE Settles = fulfills when first of the promises fulfills \n      .catch(error => Notiflix.Notify.failure(error));//rejects when first of the promises rejects.\n}\nfunction anyPromise() {\n  const promiseAny = Promise.any(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) //ANY поверне Fulfills when any of the promises fulfills; \n    .catch(error => Notiflix.Notify.failure(error));// rejects when all of the promises reject. and returns aggregateEror якщо всі rejected  \n}\nfunction allSet() {\n  const promiseAllSettled = Promise.allSettled(arrPromises)\n    .then(value => Notiflix.Notify.success(value)) //AllSettled поверне  масив всіх промісів як resolve/reject коли всі проміси завершені(settled)\n    .catch(error => Notiflix.Notify.failure(error));\n}\n\n\nfunction clearListener() {\n  refs.all.removeEventListener(\"click\", allPromise);\n  refs.race.removeEventListener(\"click\", racePromise);\n  refs.any.removeEventListener(\"click\", anyPromise);\n  refs.allSet.removeEventListener(\"click\", allSet);\n}\n\n\n "],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$arrPromises","$47d4ff9957288465$var$markUp","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$refs","form","document","querySelector","input","submit","buttons","all","race","any","allSet","promises","$47d4ff9957288465$var$allPromise","then","value","$parcel$interopDefault","Notify","success","catch","error","failure","$47d4ff9957288465$var$racePromise","$47d4ff9957288465$var$anyPromise","$47d4ff9957288465$var$allSet","allSettled","disabled","style","cssText","addEventListener","e","preventDefault","elements","step","amount","currentTarget","nDelay","Number","nStep","nAmount","i","Loading","standard","promise","data","push","console","log","innerHTML","remove","reset"],"version":3,"file":"03-promises.ef5d4f7b.js.map"}